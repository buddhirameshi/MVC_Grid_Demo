@model PagedList.IPagedList<DataTransferObjects.ItemDto>
@using PagedList.Mvc;
@*@model IEnumerable<DataTransferObjects.ItemDto>*@

@{
    ViewBag.Title = "Display";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="wrapper">

    <h2>Display</h2>
    <hr/>


    @(Html.ValidationSummary(true))
    <table class="table-bordered table-responsive table-hover table-condensed table">
        <tr class="table-header">
            <th>
                @Html.ActionLink("ItemId", "Display", new { sortParam = "ItemId", sortOrder = ViewBag.CurrentSort })
                @*@Html.DisplayNameFor(model => model.SingleOrDefault().ItemId)*@
            </th>
            <th>
                @Html.ActionLink("Description", "Display", new { sortParam = "Description", sortOrder = ViewBag.CurrentSort })
            </th>
            <th>
                @Html.ActionLink("Price", "Display", new { sortParam ="Price", sortOrder = ViewBag.CurrentSort })
            </th>
            <th>

            </th>

        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @* <button class="alert-danger glyphicon-minus-sign"></button>*@
                    @Html.ActionLink("Edit", "Edit", new { id = item.ItemId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ItemId })
                </td>

            </tr>
        }
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td>
                @Html.ActionLink("Add", "Create")
            </td>
        </tr>
    </table>

    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Display", new { page, sortParam = ViewBag.SortParam, sortOrder = ViewBag.CurrentSort }))
</div>